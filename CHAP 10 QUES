# CREATE A CLASS (2-D VECTOR) AND USE IT TO CREATE ANOTHER CLASS REPRESENTING A 3-D VECTOR.
class twoDvector:
    def __init__(self,i,j):
        self.i = i
        self.j= j
    def show(self):
        print(f"the vector is {self.i}i+{self.j}j")

class threeDvector(twoDvector):
    def __init__(self, i, j, k):
        super().__init__(i, j)
        self.k = k


    def show(self):
        print(f"the vector is {self.i}i+{self.j}j+{self.k}k")

a=twoDvector(1,3)
b=threeDvector(3,5,2)
a.show()
b.show()

# CREATE A CLASS 'PETS' FROM CLASS 'ANIMALS' AND FURTHER CREATE A CLASS 'DOG' FROM 'PETS'. ADD METHOD 'BARK' TO CLASS 'DOG'.
class animals:
    pass
class pets(animals):
    pass
class dog(pets):
    @staticmethod
    def bark():
        print("bow bow")
d=dog()
d.bark()

# CREATE A CLASS 'EMPLOYEE' AND ADD SALARY THEN INCREMENT PROPERTIES TO IT. WRITE A METHOD 'SALARYAFTERINCREMENT' METHOD WITH A @PROPERTY DECORATOR WITH A SETTER THAT CHANGES THE VALUE OF INCREMENT BASED ON THE SALARY.
class Employee:
    salary = 234
    increment = 20 
    
    @property
    def salaryAfterIncrement(self):
        return (self.salary + self.salary * (self.increment/100))

    @salaryAfterIncrement.setter 
    def salaryAfterIncrement(self, salary):
        self.increment =  ((salary/self.salary) -1)*100 




e = Employee()
# print(e.salaryAfterIncrement)
e.salaryAfterIncrement = 280.8
print(e.increment)

# WRITE A CLASS 'COMPLEX' TO REPRESENTS COMPLEX NUMBERS, ALONG WITH OVERLOADED OPERATOR '+' AND '*' WHICH ADDS AND MULTIPLIES THEM.
class Complex:
    def __init__(self,r,i):
        self.r=r
        self.i=i
    def __add__(self, c2):
        return Complex(self.r + c2.r, self.i + c2.i)
    
    def __mul__(self, c2):
        real_part = self.r * c2.r - self.i * c2.i
        imag_part = self.r * c2.i + self.i * c2.r
        return Complex(real_part, imag_part)
    
    def __str__(self):
        return f"{self.r} + {self.i}i"
    

c1 = Complex(1, 2)
c2 = Complex(3, 4)
print(c1 + c2)
print(c1*c2)


